---
- name: Create Kubernetes Cluster
  hosts: localhost
  become: false
  vars:
    cluster_name: "{{ cluster_name | default('ml-pipeline-cluster') }}"
    cluster_type: "minikube"

  tasks:
    - name: Check for required dependencies
      command: "which {{ item }}"
      register: dependency_check
      ignore_errors: true
      changed_when: false
      loop:
        - "{{ cluster_type }}"
        - kubectl

    - name: Check if cluster exists
      shell: |
        {% if cluster_type == "minikube" %}
        minikube status -p {{ cluster_name }}
        {% elif cluster_type == "kind" %}
        kind get clusters | grep {{ cluster_name }}
        {% endif %}
      register: cluster_status
      ignore_errors: true
      changed_when: false

    - name: Create minikube cluster
      command: >
        minikube start
        --driver=docker
        --cpus=4
        --memory=2200mb
        --profile={{ cluster_name }}
        --addons=dashboard,ingress,metrics-server
      when:
        - cluster_type == "minikube"
        - cluster_status.rc != 0

    - name: Create kind cluster
      shell: |
        cat <<EOF | kind create cluster --name {{ cluster_name }} --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
        - role: worker
        - role: worker
        EOF
      when:
        - cluster_type == "kind"
        - cluster_status.rc != 0

    - name: Get cleaned kubeconfig
      shell: |
        {% if cluster_type == "minikube" %}
        minikube kubeconfig -p {{ cluster_name }} | awk '/^apiVersion:/{flag=1} flag'
        {% elif cluster_type == "kind" %}
        kind get kubeconfig --name {{ cluster_name }}
        {% endif %}
      register: kubeconfig_content

    - name: Save kubeconfig to file
      copy:
        content: "{{ kubeconfig_content.stdout }}"
        dest: "{{ playbook_dir }}/../kubeconfig"
        mode: '0600'

    - name: Verify cluster is running
      shell: kubectl --kubeconfig={{ playbook_dir }}/../kubeconfig get nodes
      register: node_status
      retries: 10
      delay: 5
      until: node_status.rc == 0

    - name: Display cluster information
      debug:
        msg: "Kubernetes cluster '{{ cluster_name }}' created successfully!"
